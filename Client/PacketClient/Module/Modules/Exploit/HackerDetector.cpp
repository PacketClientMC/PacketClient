#include "HackerDetector.h"

using namespace std;
HackerDetector::HackerDetector() : IModule(0, Category::EXPLOIT, "Detects if other players are hacking (may false flag with Low FPS/Lag)") {
	registerEnumSetting("Messages", &messages, 0);
	messages.addEntry("Client", 0);
	messages.addEntry("Server", 1);
	registerBoolSetting("Immobile Check", &immobileCheck, immobileCheck);
	registerBoolSetting("Speed Check", &speedCheck, speedCheck);
	registerBoolSetting("Derp Check", &derpCheck, derpCheck);
	registerBoolSetting("Fly Check", &flyCheck, flyCheck);
	registerIntSetting("Strictness", &strictness, strictness, 0, 5);
}

const char* HackerDetector::getModuleName() {
	return ("HackerDetector");
}

void HackerDetector::onEnable() {
	timesFailedSpeed = 1;
	timesFailedDerp = 1;
	timesFailedFly = 1;
}

void HackerDetector::onTick(GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	allowedOffGroundSpeed = 13.5f - strictness;
	allowedGroundSpeed = 14.5f - strictness;
	allowedTicks = 13 - strictness;

#pragma region Checks
	g_Data.forEachEntity([&](Entity* ent, bool b) {
		if (ent == nullptr) return;
		if (ent->getEntityTypeId() == 51 || ent->getEntityTypeId() == 1677999) return;
		if (ent->getEntityTypeId() == 80 || ent->getEntityTypeId() == 69) return;
		if (!g_Data.getLocalPlayer()->canAttack(ent, false)) return;
		if (!g_Data.getLocalPlayer()->isAlive()) return;
		if (!TargetUtil::isValidTarget(ent)) return;
		if (ent == g_Data.getLocalPlayer()) return;
		if (!ent->isAlive()) return;

		if (g_Data.canUseMoveKeys()) {
			if (player->onGround) { groundTicks++; offGroundTicks = 0; }
			else { offGroundTicks++; groundTicks = 0; }

			float velocityxz = ent->velocity.magnitudexz();
			float velocityxy = ent->velocity.magnitudexy();
			float velocity = ent->velocity.magnitude();
			int bps = (int)ent->getBlocksPerSecond();

			currSpeed = to_string((int)ent->getBlocksPerSecond()) + string(".") + to_string((int)(ent->getBlocksPerSecond() * 10) - ((int)ent->getBlocksPerSecond() * 10));
			name = ent->getNameTag()->getText(); name = Utils::sanitize(name); name = name.substr(0, name.find('\n'));
			if (name == "" || name == " ") name = "Invalid Name";

			TextPacket textPacket;
			textPacket.sourceName.setText(g_Data.getLocalPlayer()->getNameTag()->getText());
			textPacket.xboxUserId = to_string(g_Data.getLocalPlayer()->getUserId());

			// Speed Checks
			if (speedCheck) {
				char* speedAB = ent->onGround ? "A" : "B";
				if (bps >= allowedGroundSpeed || bps >= allowedOffGroundSpeed) {
					switch (messages.getSelectedValue()) {
					case 0: clientMessageF("[Packet] %s%s%s has failed %sSpeed-%s (%s BPS) x%s", GRAY, name.c_str(), WHITE, GRAY, speedAB, currSpeed.c_str(), to_string((timesFailedSpeed)).c_str()); break;
					case 1: str = "[Packet] " + name + " has failed Speed-" + string(ent->onGround ? "A" : "B") + " (" + currSpeed + " BPS)" + " x" + to_string((timesFailedSpeed));
						textPacket.message.setText(str);
						g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&textPacket);
						break;
					}
					timesFailedSpeed += 1;
				}
				else timesFailedSpeed = 1;
			}

			// Derp Checks
			if (derpCheck) {
				string pitch = string(to_string(ent->pitch));
				string yaw = string(to_string(ent->yaw));

				if (ent->yaw <= -181 || ent->yaw >= 181 || ent->pitch >= 90 || ent->pitch <= -90) {
					switch (messages.getSelectedValue()) {
					case 0: clientMessageF("[Packet] %s%s%s has failed %sInvalid (%s, %s) x%s", GRAY, name.c_str(), WHITE, GRAY, pitch.c_str(), yaw.c_str(), to_string((timesFailedDerp)).c_str()); break;
					case 1: str = "[Packet] " + name + " has failed Invalid" + " (" + pitch + ", " + yaw + ")" + " x" + to_string((timesFailedDerp));
						textPacket.message.setText(str);
						g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&textPacket);
						break;
					}
					timesFailedDerp += 1;
				}
				else timesFailedDerp = 1;
			}

			// Fly Checks
			if (flyCheck) {
				if (ent->onGround) return;

				// im not sure how fly checks work so ye
			}
		}
	});
#pragma endregion
}

void HackerDetector::onPlayerTick(Player* plr) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	// if u ever want hacker detector to be extra fast at detecting then put it here lol
	// butttt then rip ur chat
}