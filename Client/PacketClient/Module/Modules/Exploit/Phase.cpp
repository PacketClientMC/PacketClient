#include "Phase.h"

using namespace std;
Phase::Phase() : IModule(0, Category::EXPLOIT, "Allows you to Walk through blocks") {
	registerEnumSetting("Mode", &mode, 0);
	mode.addEntry("Vanilla", 0);
	mode.addEntry("Hive", 1);
	registerBoolSetting("Vertical", &vertical, vertical);
}

const char* Phase::getRawModuleName() {
	return "Phase";
}

const char* Phase::getModuleName() {
	if (mode.getSelectedValue() == 0) name = string("Phase ") + string(GRAY) + string("Vanilla");
	if (mode.getSelectedValue() == 1) name = string("Phase ") + string(GRAY) + string("Hive");
	return name.c_str();
}

void Phase::onEnable() {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	tickSinceTeleport = 0;
	worldChanged = false;
	tryTeleport = false;
	tick = 0;
}

void Phase::onTick(GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	vec3_t eyePos = g_Data.getLocalPlayer()->eyePos0;
	vec3_t pPos = *player->getPos();
	vec3_t pos;

	auto* chestList = g_Data.getChestList();
	auto listLock = g_Data.lockChestList();
	auto ourListLock = scoped_lock(this->listLock);

	switch (mode.getSelectedValue()) {
	case 0: // Vanilla
		gm->player->aabb.upper.y = gm->player->aabb.lower.y;
		if (vertical) gm->player->aabb.upper.y = 0.f;
		break;
	case 1: // Hive
		this->bufferedChestList.clear();
		this->bufferedChestList.insert(this->bufferedChestList.end(), chestList->begin(), chestList->end());
		chestList->clear();

		if (worldChanged) {
			chestList->clear();
			tick++;
			if (player->isImmobile() && g_Data.isInGame()) {
				tickSinceTeleport = 0;
				clientMessageF("World Changed");
				tryTeleport = true; worldChanged = false; tick = 0;
			}
		}
		break;
	}

	// Teleport to EnderChest
	if (tryTeleport) {
		tickSinceTeleport++;
		clientMessageF("%sLocating Ender Chest(s)...", YELLOW);
		for (auto chest = bufferedChestList.begin(); chest != bufferedChestList.end(); ++chest) {
			auto storageID = player->region->getBlock((*chest)->upper)->blockLegacy->blockId;
			vec3_t blockPos = (*chest)->lower;
			if (blockPos.x < 0) blockPos.x -= 1;
			if (blockPos.z < 0) blockPos.z -= 1;
			storageID = player->region->getBlock(blockPos)->toLegacy()->blockId;

			if (storageID == 130) {
				clientMessageF("%sFound Ender Chest(s)!", GREEN);
				//auto notification = g_Data.addNotification("Phase", "Teleported!"); notification->duration = 3.f;
				player->setPos(vec3_t(blockPos.x + 0.5f, blockPos.y + 2.61f, blockPos.z + 0.5f));
				tickSinceTeleport = 0;
				tryTeleport = false;
			}
		}
		if (chestList->empty() && tickSinceTeleport >= 20) { clientMessageF("%sNo Ender Chest(s) found!", RED); tryTeleport = false; }
	}
}

void Phase::onDisable() {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr) return;

	vec3_t pos;
	vec3_t pPos = g_Data.getLocalPlayer()->eyePos0;

	switch (mode.getSelectedValue()) {
	case 0: // Vanilla
		player->aabb.upper.y += 1.8f;
		if (vertical) pos.x = pPos.x; pos.y = 0.000001f + pPos.y; pos.z = pPos.z; player->setPos(pos);
		break;
	}
}